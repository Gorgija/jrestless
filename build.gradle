def checkstyleCfg = "${projectDir}/alien/checkstyle/checkstyle.xml" as File
	
def bintrayUser = hasProperty('bintray_user') ? property('bintray_user') : 'unset'
def bintrayKey = hasProperty('bintray_key') ? property('bintray_key') : 'unset'

buildscript {
	repositories {
		jcenter()
		maven {
			url 'https://plugins.gradle.org/m2/'
	    }
	}
	dependencies {
		classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7'
		classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.1'
	}
}

allprojects {

	apply plugin: 'java'

	sourceCompatibility = 1.8
	targetCompatibility = 1.8
	
	if( rootProject == project ) {
        //Add sonar plugin to only root projects not subprojects.
        apply plugin: 'org.sonarqube'
    }
    repositories {
		jcenter()
		maven {
			url 'https://plugins.gradle.org/m2/'
	    }
	}
}

subprojects {

	apply plugin: 'eclipse'
	apply plugin: 'maven'
	apply plugin: 'checkstyle'
	apply plugin: 'findbugs'
	apply plugin: 'pmd'
	apply plugin: 'jacoco'
	apply plugin: 'com.jfrog.bintray'
	apply plugin: 'maven-publish'

	repositories {
		mavenCentral()
	}

	checkstyle {
		configFile = checkstyleCfg
		toolVersion = '6.19'
		ignoreFailures = false
		sourceSets = [project.sourceSets.main]
	}
	build.dependsOn checkstyleMain

	findbugs {
		toolVersion = '3.0.1'
		sourceSets = [project.sourceSets.main]
		effort = 'max'
	}
	tasks.withType(FindBugs) {
		reports {
			xml.enabled = false
			html.enabled = true
		}
	}

	pmd {
		toolVersion = '5.4.2'
		sourceSets = [project.sourceSets.main]
	}

	jacocoTestReport {
		reports {
			xml.enabled = true
			html.enabled = true
		}
	}
	check.dependsOn jacocoTestReport

	// custom tasks for creating source/javadoc jars
	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	task javadocJar(type: Jar, dependsOn: javadoc) {
		classifier = 'javadoc'
		from javadoc.destinationDir
	}

	// add javadoc/source jar tasks as artifacts
	artifacts {
		archives sourcesJar, javadocJar
	}
	
	tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

	bintray {
		user = bintrayUser
		key = bintrayKey
		pkg {
			repo = 'maven'
			name = "$project.name"
			licenses = ['Apache-2.0']
			vcsUrl = 'https://github.com/bbilger/jrestless.git'
			issueTrackerUrl = 'https://github.com/bbilger/jrestless/issues'
			websiteUrl = 'https://github.com/bbilger/jrestless'
			githubRepo = 'bbilger/jrestless'
			version {
				name = "${globaleModuleVersion}"
				vcsTag = 'v' + "${globaleModuleVersion}"
				desc = "${globaleModuleVersion}"
			}
		}
		publications = ['BintrayPublication']
	}
	
	publishing {
		publications {
			BintrayPublication(MavenPublication) {
				from components.java
				groupId "$group"
				artifactId "$project.name"
				version "${globaleModuleVersion}"
				artifact sourcesJar 
				artifact javadocJar
			}
			// change from runtime to compile time
			all {
				pom.withXml {
    				asNode().dependencies.'*'.findAll() {
      					it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
        					dep.name == it.artifactId.text()
      					}
    				}.each { it.scope*.value = 'compile'}
  				}
			}
		}
	}
}

dependencies {
	compile project(":core:jrestless-core-container")
	compile project(":aws:gateway:jrestless-aws-gateway-core")
	compile project(":aws:gateway:jrestless-aws-gateway-handler")
	compile project(":aws:service:jrestless-aws-service-core")
	compile project(":aws:service:jrestless-aws-service-handler")
	compile project(":aws:service:jrestless-aws-service-feign-client")
	compile project(":test:jrestless-test")
}

task wrapper(type: Wrapper) {
	gradleVersion = '3.0'
}
