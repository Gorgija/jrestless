def checkstyleCfg = "${projectDir}/alien/checkstyle/checkstyle.xml" as File

def bintrayUser = hasProperty('bintray_user') ? property('bintray_user') : 'unset'
def bintrayKey = hasProperty('bintray_key') ? property('bintray_key') : 'unset'

buildscript {
	repositories {
		jcenter()
		maven {
			url 'https://plugins.gradle.org/m2/'
	    }
	}
	dependencies {
		classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7'
		classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.1'
	}
}

allprojects {

	apply plugin: 'java'

	sourceCompatibility = 1.8
	targetCompatibility = 1.8

    repositories {
		jcenter()
		maven {
			url 'https://plugins.gradle.org/m2/'
	    }
	}
}

subprojects {

	apply plugin: 'eclipse'
	apply plugin: 'maven'
	apply plugin: 'checkstyle'
	apply plugin: 'findbugs'
	apply plugin: 'pmd'
	apply plugin: 'jacoco'
	apply plugin: 'com.jfrog.bintray'
	apply plugin: 'maven-publish'

	repositories {
		mavenCentral()
	}

	ext.libraries = [
		jersey_server: "org.glassfish.jersey.core:jersey-server:${jerseyVersion}",
		jersey_media_json_jackson: "org.glassfish.jersey.media:jersey-media-json-jackson:${jerseyVersion}",
		jersey_test_grizzly: "org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:${jerseyVersion}",
		jersey_test_core: "org.glassfish.jersey.test-framework:jersey-test-framework-core:${jerseyVersion}",
		findbugs_jsr305: 'com.google.code.findbugs:jsr305:3.0.1',
		aws_lambda_core: 'com.amazonaws:aws-lambda-java-core:1.1.0',
		aws_lambda_events_plain: dependencies.create('com.amazonaws:aws-lambda-java-events:1.3.0') {
			exclude module: "aws-java-sdk-s3"
			exclude module: "aws-java-sdk-sns"
			exclude module: "aws-java-sdk-cognitoidentity"
			exclude module: "aws-java-sdk-kinesis"
			exclude module: "aws-java-sdk-dynamodb"
		},
		aws_lambda_events_joda_time: 'joda-time:joda-time:2.8.1',
		aws_java_sdk_lambda: 'com.amazonaws:aws-java-sdk-lambda:1.11.41',
		feign_core: 'io.github.openfeign:feign-core:9.3.1',
		slf4j_api: 'org.slf4j:slf4j-api:1.7.21',
		slf4j_simple: 'org.slf4j:slf4j-simple:1.7.21',
		junit: 'junit:junit:4.12',
		mockito_core: 'org.mockito:mockito-core:2.2.0',
		guava_testlib: 'com.google.guava:guava-testlib:18.0',
		jsonassert: 'org.skyscreamer:jsonassert:1.3.0',
		gson: 'com.google.code.gson:gson:2.8.1'
	]

	checkstyle {
		configFile = checkstyleCfg
		toolVersion = '6.19'
		ignoreFailures = false
		sourceSets = [project.sourceSets.main]
	}
	build.dependsOn checkstyleMain

	findbugs {
		toolVersion = '3.0.1'
		sourceSets = [project.sourceSets.main]
		effort = 'max'
	}
	tasks.withType(FindBugs) {
		reports {
			xml.enabled = false
			html.enabled = true
		}
	}

	pmd {
		toolVersion = '5.4.2'
		sourceSets = [project.sourceSets.main]
	}

	jacocoTestReport {
		reports {
			xml.enabled = true
			html.enabled = true
		}
	}
	check.dependsOn jacocoTestReport

	// custom tasks for creating source/javadoc jars
	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	task javadocJar(type: Jar, dependsOn: javadoc) {
		classifier = 'javadoc'
		from javadoc.destinationDir
	}

	// add javadoc/source jar tasks as artifacts
	artifacts {
		archives sourcesJar, javadocJar
	}

	tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

	bintray {
		user = bintrayUser
		key = bintrayKey
		pkg {
			repo = 'maven'
			name = "$project.name"
			licenses = ['Apache-2.0']
			vcsUrl = 'https://github.com/bbilger/jrestless.git'
			issueTrackerUrl = 'https://github.com/bbilger/jrestless/issues'
			websiteUrl = 'https://github.com/bbilger/jrestless'
			githubRepo = 'bbilger/jrestless'
			version {
				name = "${globaleModuleVersion}"
				vcsTag = 'v' + "${globaleModuleVersion}"
				desc = "${globaleModuleVersion}"
			}
		}
		publications = ['BintrayPublication']
	}

	publishing {
		publications {
			BintrayPublication(MavenPublication) {
				from components.java
				groupId "$group"
				artifactId "$project.name"
				version "${globaleModuleVersion}"
				artifact sourcesJar
				artifact javadocJar
			}
			// change from runtime to compile time
			all {
				pom.withXml {
    				asNode().dependencies.'*'.findAll() {
      					it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
        					dep.name == it.artifactId.text()
      					}
    				}.each { it.scope*.value = 'compile'}
  				}
			}
		}
	}
}

dependencies {
	compile project(":core:jrestless-core")
	compile project(":core:jrestless-core-container")
	compile project(":aws:core:jrestless-aws-core-handler")
	compile project(":aws:core:jrestless-aws-core")
	compile project(":aws:gateway:jrestless-aws-gateway-handler")
	compile project(":aws:service:jrestless-aws-service-handler")
	compile project(":aws:service:jrestless-aws-service-feign-client")
	compile project(":aws:sns:jrestless-aws-sns-handler")
	compile project(":openwhisk:core:jrestless-openwhisk-core")
	compile project(":openwhisk:webaction:jrestless-openwhisk-webaction-handler")
	compile project(":test:jrestless-test")
}

task wrapper(type: Wrapper) {
	gradleVersion = '4.0'
}
