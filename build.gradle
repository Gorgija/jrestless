def checkstyleCfg = "${projectDir}/alien/checkstyle/checkstyle.xml" as File

def bintrayUser = hasProperty('bintray_user') ? property('bintray_user') : 'unset'
def bintrayKey = hasProperty('bintray_key') ? property('bintray_key') : 'unset'

buildscript {
	repositories {
		jcenter()
		maven {
			url 'https://plugins.gradle.org/m2/'
	  }
	}
	dependencies {
		classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.0'
		classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.1'
		classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.3'
	}
	dependencies {
		classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
	}
}

apply plugin: 'org.sonarqube'
apply plugin: 'com.github.ben-manes.versions'

allprojects {

  apply plugin: 'java'

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  repositories {
		jcenter()
		maven {
			url 'https://plugins.gradle.org/m2/'
			/*
			 * this repo is required by fnproject, only, it's define in its build.gradle and the project compiles
			 * BUT the sonarqube task fails with "Could not find com.fnproject.fn:api"
			 * So we add it to all modules in order to make SonarQube happy...
			 */
			url 'https://dl.bintray.com/fnproject/fnproject/'
	  }
	}
}

subprojects {

	apply plugin: 'eclipse'
	apply plugin: 'maven'
	apply plugin: 'checkstyle'
	apply plugin: 'findbugs'
	apply plugin: 'pmd'
	apply plugin: 'jacoco'
	apply plugin: 'com.jfrog.bintray'
	apply plugin: 'maven-publish'
	apply plugin: 'org.junit.platform.gradle.plugin'

	repositories {
		mavenCentral()
	}

	ext.libraries = [
		jersey_server: "org.glassfish.jersey.core:jersey-server:${jerseyVersion}",
		jersey_media_json_jackson: "org.glassfish.jersey.media:jersey-media-json-jackson:${jerseyVersion}",
		jersey_test_core: dependencies.create("org.glassfish.jersey.test-framework:jersey-test-framework-core:${jerseyVersion}") {
			exclude module: "junit"
		},
		jersey_test_grizzly: dependencies.create("org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:${jerseyVersion}") {
			exclude module: "jersey-test-framework-core"
			exclude module: "junit"
		},
		jersey_inject_hk2: "org.glassfish.jersey.inject:jersey-hk2:${jerseyVersion}",
		findbugs_jsr305: 'com.google.code.findbugs:jsr305:3.0.2',
		aws_lambda_core: 'com.amazonaws:aws-lambda-java-core:1.2.0',
		aws_lambda_events_plain: dependencies.create('com.amazonaws:aws-lambda-java-events:2.0.2') {
			exclude module: "aws-java-sdk-s3"
			exclude module: "aws-java-sdk-kinesis"
			exclude module: "aws-java-sdk-dynamodb"
		},
		aws_lambda_events_joda_time: 'joda-time:joda-time:2.9.9',
		aws_java_sdk_lambda: 'com.amazonaws:aws-java-sdk-lambda:1.11.234',
		feign_core: 'io.github.openfeign:feign-core:9.5.1',
		slf4j_api: "org.slf4j:slf4j-api:${slf4jVersion}",
		slf4j_simple: "org.slf4j:slf4j-simple:${slf4jVersion}",
		junit_jupiter_api: "org.junit.jupiter:junit-jupiter-api:${junitVersion}",
		junit_jupiter_engine: "org.junit.jupiter:junit-jupiter-engine:${junitVersion}",
		junit_jupiter_params: "org.junit.jupiter:junit-jupiter-params:${junitVersion}",
		mockito_core: 'org.mockito:mockito-core:2.11.0',
		guava: 'com.google.guava:guava:23.5-jre',
		jsonassert: 'org.skyscreamer:jsonassert:1.5.0',
		gson: 'com.google.code.gson:gson:2.8.2'
	]

	// common dependencies
	dependencies {
		testCompile(
			libraries.junit_jupiter_api,
			libraries.mockito_core
		)
		testRuntime(
			libraries.junit_jupiter_engine,
			'org.junit.platform:junit-platform-launcher:1.0.2'
		)
	}

	checkstyle {
		configFile = checkstyleCfg
		toolVersion = '6.19'
		ignoreFailures = false
		sourceSets = [project.sourceSets.main]
	}
	build.dependsOn checkstyleMain

	findbugs {
		toolVersion = '3.0.1'
		sourceSets = [project.sourceSets.main]
		effort = 'max'
	}
	tasks.withType(FindBugs) {
		reports {
			xml.enabled = false
			html.enabled = true
		}
	}

	pmd {
		toolVersion = '5.4.2'
		sourceSets = [project.sourceSets.main]
	}
    jacoco {
        applyTo junitPlatformTest
    }
	jacocoTestReport {
		reports {
			xml.enabled = true
			html.enabled = true
		}
	}
	junitPlatformTest {
        jacoco {
            destinationFile = file("$buildDir/jacoco/test.exec")
        }
    }
	check.dependsOn jacocoTestReport
	sonarqube {
		properties {
			property "sonar.jacoco.reportPaths", "${project.buildDir}/jacoco/test.exec"
			property "sonar.junit.reportsPath", "${project.buildDir}/test-results/junit-platform"
		}
	}

	// custom tasks for creating source/javadoc jars
	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	task javadocJar(type: Jar, dependsOn: javadoc) {
		classifier = 'javadoc'
		from javadoc.destinationDir
	}

	// add javadoc/source jar tasks as artifacts
	artifacts {
		archives sourcesJar, javadocJar
	}

	tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

	bintray {
		user = bintrayUser
		key = bintrayKey
		pkg {
			repo = 'maven'
			name = "$project.name"
			licenses = ['Apache-2.0']
			vcsUrl = 'https://github.com/bbilger/jrestless.git'
			issueTrackerUrl = 'https://github.com/bbilger/jrestless/issues'
			websiteUrl = 'https://github.com/bbilger/jrestless'
			githubRepo = 'bbilger/jrestless'
			version {
				name = "${globalModuleVersion}"
				vcsTag = 'v' + "${globalModuleVersion}"
				desc = "${globalModuleVersion}"
			}
		}
		publications = ['BintrayPublication']
	}

	publishing {
		publications {
			BintrayPublication(MavenPublication) {
				from components.java
				groupId "$group"
				artifactId "$project.name"
				version "${globalModuleVersion}"
				artifact sourcesJar
				artifact javadocJar
			}
			// change from runtime to compile time
			all {
				pom.withXml {
    				asNode().dependencies.'*'.findAll() {
      					it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
        					dep.name == it.artifactId.text()
      					}
    				}.each { it.scope*.value = 'compile'}
  				}
			}
		}
	}
}

dependencies {
	compile project(":core:jrestless-core")
	compile project(":core:jrestless-core-container")
	compile project(":aws:core:jrestless-aws-core-handler")
	compile project(":aws:core:jrestless-aws-core")
	compile project(":aws:gateway:jrestless-aws-gateway-handler")
	compile project(":aws:service:jrestless-aws-service-handler")
	compile project(":aws:service:jrestless-aws-service-feign-client")
	compile project(":aws:sns:jrestless-aws-sns-handler")
	compile project(":openwhisk:core:jrestless-openwhisk-core")
	compile project(":openwhisk:webaction:jrestless-openwhisk-webaction-handler")
	compile project(":fnproject:core:jrestless-fnproject-core")
	compile project(":test:jrestless-test")
}

task wrapper(type: Wrapper) {
	gradleVersion = '4.3.1'
}
